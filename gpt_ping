#!/bin/python
import json
import argparse
import os
import subprocess
import parser
import backends

# Get the path to the directory were this file is located
script_dir = os.path.dirname(os.path.realpath(__file__))

# Argument parsing ------------------------------------------------------------
presets = {}
with open(f'{script_dir}/gpt_presets.json') as read:
    presets = json.load(read)
preset_list = list(presets)

# Parses the command line arguments
arg_parser = argparse.ArgumentParser()

arg_parser.add_argument(
    'preset',
    help=f'Preset of the assistance. Can be one of: {preset_list}',
    default='default',
    nargs='?')
arg_parser.add_argument(
    '-p',
    help='If used, the program will not run in interactive mode, only the',
    type=str)
arg_parser.add_argument('-T', '--temperature', type=float, default=1)
arg_parser.add_argument('-b', '--backend', type=str, default="gpt3.5")
arg_parser.add_argument('-t',
                        help='response timeout (seconds)',
                        type=int,
                        default=10)
arg_parser.add_argument('-l',
                        '--response_length',
                        help='Maximum number of tokens',
                        type=int,
                        default=200)
arg_parser.add_argument('-m',
                        '--message',
                        help='override preset and send message',
                        type=str)

args = arg_parser.parse_args()

meeseeks = backends.gpt35(preset=args.preset,
                         discussion=args.message,
                         length=args.response_length,
                         temp=args.temperature)

# Main discussion loop --------------------------------------------------------
while True:
    if (content_user := input('> '))[0] == "/":
        parser.command(content_user, meeseeks=meeseeks)
        continue

    meeseeks.tell(content_user)
    content_assistant = meeseeks.reply()

    # print the output so that it is  ✨ p r e t t y ✨
    subprocess.run(["glow"], shell=True, input=content_assistant.encode('utf-8'))

    # Check for code blocks in the answer
    parser.code(content_assistant)
