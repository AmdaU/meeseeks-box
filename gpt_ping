#!/bin/python
import requests
import json
import sys
import argparse
import os
import subprocess
from parser import parse_code

script_dir = os.path.dirname(os.path.realpath(__file__))

max_number_of_tries = 3

# gets the api key
api_key = ''
with open(f"{script_dir}/open_ai.secrets") as secret:
    api_key = secret.readline().strip('\n')

# The API endpoint for the model you want to use
endpoint = "https://api.openai.com/v1/chat/completions"

headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {api_key}"
}


def send_request(data):
    number_of_tries = 0
    while number_of_tries < max_number_of_tries:
        response = requests.post(endpoint,
                                 headers=headers,
                                 data=json.dumps(data),
                                 timeout=args.t)

        if 'choices' in response.json():
            message = response.json()['choices'][-1]['message']['content']
            return message
        number_of_tries += 1

    print(response)
    print(response.json())
    sys.exit(1)


# Argument parsing ----------------------------------------------------------

presets = {}
with open(f'{script_dir}/gpt_presets.json') as read:
    presets = json.load(read)
type_list = list(presets)
parser = argparse.ArgumentParser()

parser.add_argument(
    'preset',
    help=
    f'Preset (mode if you will) of the assistance. Can be one of: {type_list}',
    default='default',
    nargs='?')
parser.add_argument('prompt', help='The prompt', type=str)
parser.add_argument('-T', '--temperature', type=float, default=1)
parser.add_argument('-t',
                    help='response timeout (seconds)',
                    type=int,
                    default=10)
parser.add_argument('-l',
                    '--response_length',
                    help='Maximum number of tokens',
                    type=int,
                    default=200)
parser.add_argument('-m',
                    '--message',
                    help='override preset and send message',
                    type=str)

args = parser.parse_args()

# Main discussion loop --------------------------------------------------------

discussion = eval(
    args.message) if args.message else presets[args.preset]['prompt']

if 'data' in presets[args.preset]:
    for data_name, data_command in presets[args.preset]['data'].items():
        result = subprocess.run([data_command],
                                shell=True,
                                capture_output=True).stdout.decode()
        discussion[0]["content"] = discussion[0]["content"].replace(
            '{' + str(data_name) + '}', result)

message_user = {"role": "user", "content": args.prompt}

discussion.append(message_user)

# The data to send to the API
data = {
    "model": "gpt-3.5-turbo",
    "messages": discussion,
    "max_tokens": args.response_length,
    "temperature": args.temperature,
}

content_assistant = send_request(data)

message = {"role": "assistant", "content": content_assistant}
discussion.append(message)

with open(f'{script_dir}/discussion.txt', 'w') as file:
    file.write(str(discussion))

print(content_assistant)
