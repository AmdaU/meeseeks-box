#!/usr/bin/python
import json
import argparse
import os
import subprocess
import parser
import backends
from custom_logging import logger
import sys

# Get the path to the directory were this file is located
script_dir = os.path.dirname(os.path.realpath(__file__))

# Argument parsing ------------------------------------------------------------
presets = {}
with open(f"{script_dir}/ressources/presets.json") as read:
    presets = json.load(read)
preset_list = list(presets)

# Parses the command line arguments
arg_parser = argparse.ArgumentParser()

arg_parser.add_argument(
    "preset",
    help=f"Preset of the assistance. Can be one of: {preset_list}",
    default="default",
    nargs="?",
)
arg_parser.add_argument(
    "-p",
    help="If used, the program will not run in interactive mode, only the",
    type=str,
)
arg_parser.add_argument("-T", "--temperature", type=float, default=0)
arg_parser.add_argument(
    "--live",
    help='"Live" preview alows the anwser to be seen as it is being generated (experimental)',
    action="store_true",
)
arg_parser.add_argument("-b", "--backend", type=str, default="gpt3.5")
arg_parser.add_argument(
    "-t", help="response timeout (seconds)", type=int, default=10
)
arg_parser.add_argument(
    "-l",
    "--response_length",
    help="Maximum number of tokens",
    type=int,
    default=200,
)
arg_parser.add_argument(
    "-m", "--message", help="override preset and send message", type=str
)
arg_parser.add_argument(
    "--terminal",
    help="terminal acces",
    default=False,
    action="store_true",
)


args = arg_parser.parse_args()

if args.live:
    logger.log("system", "Live feature is expiremental, expect buginess")

live = args.live

# initiate meeseeks instance
meeseeks = backends.gpt35(
    preset=args.preset,
    discussion=args.message,
    length=args.response_length,
    temp=args.temperature,
    live=live,
)
code_blocks = None
action = "USER"
failure_counter = 0
if args.terminal:
    reply_is_action_type = True

# Main discussion loop --------------------------------------------------------
while True:
    match action:
        case "USER":
            failure_counter = 0
            if (content_user := input("> "))[0] == "/":
                parser.command(
                    content_user, meeseeks=meeseeks, code_blocks=code_blocks
                )
                continue
            meeseeks.tell(content_user)
            if args.terminal:
                action = "ACTION"
            else:
                action = "REPLY"
            continue

        case "ACTION":
            meeseeks.live = False
            content_assistant = meeseeks.reply()
            action = content_assistant

        case "REPLY":
            failure_counter = 0
            meeseeks.live = live
            content_assistant = meeseeks.reply()
            content_assistant, code_blocks = parser.code(content_assistant)

            # print the output so that it is  ✨ p r e t t y ✨
            if not meeseeks.live:
                subprocess.run(
                    [f"glow -s '{script_dir}/ressources/style.json'"],
                    shell=True,
                    input=content_assistant.encode("utf-8"),
                )
                print("")
            action = "USER"

        case "COMMAND":
            failure_counter = 0
            content_assistant = meeseeks.reply()
            logger.log("system", f"Running command {content_assistant}")
            out = subprocess.run(
                [content_assistant], shell=True, capture_output=True
            )
            out_str = out.stdout.decode()
            meeseeks.tell(out_str, role="system")
            action = "ACTION"

        case _:
            meeseeks.tell(
                "You were supposed to reply with **ONLY** **one** word like REPLY or COMMAND but you gave more words. Please retry",
                role="system",
            )
            logger.log("system", "Internal error, retring")
            failure_counter += 1
            if failure_counter > 2:
                action = "USER"
                continue
            action = "ACTION"
